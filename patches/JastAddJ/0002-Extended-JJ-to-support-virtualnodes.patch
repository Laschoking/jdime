From d74cd712f09f9919ec1fbe8b54342e0d41d43535 Mon Sep 17 00:00:00 2001
From: Olaf Lessenich <lessenic@fim.uni-passau.de>
Date: Tue, 26 May 2015 10:01:44 +0200
Subject: [PATCH 02/18] Extended JJ to support virtualnodes.

---
 JastAddJ.patch            | 428 ++++++++++++++++++++++++++++++++++++++++++++++
 java4/frontend/JDime.jadd | 172 ++++++++++---------
 2 files changed, 520 insertions(+), 80 deletions(-)
 create mode 100644 JastAddJ.patch

diff --git a/JastAddJ.patch b/JastAddJ.patch
new file mode 100644
index 0000000..c1adf52
--- /dev/null
+++ b/JastAddJ.patch
@@ -0,0 +1,428 @@
+From c8ecd6a869e4081ac5e8e191fe21c7165766dabe Mon Sep 17 00:00:00 2001
+From: Olaf Lessenich <lessenic@fim.uni-passau.de>
+Date: Thu, 23 Apr 2015 16:21:14 +0200
+Subject: [PATCH] Added necessary changes for JDime.
+
+Signed-off-by: Olaf Lessenich <lessenic@fim.uni-passau.de>
+---
+ build.xml                 |   3 +
+ java4/frontend/JDime.jadd | 393 ++++++++++++++++++++++++++++++++++++++++++++++
+ 2 files changed, 396 insertions(+)
+ create mode 100644 java4/frontend/JDime.jadd
+
+diff --git a/build.xml b/build.xml
+index 5ea084a..7ee2933 100644
+--- a/build.xml
++++ b/build.xml
+@@ -154,6 +154,9 @@ Build a standard release:
+ 			<fileset dir="${bin.dir}">
+ 				<include name="**/*"/>
+ 			</fileset>
++			<fileset dir="${src.dir}">
++				<include name="**/*"/>
++			</fileset>
+ 		</jar>
+ 	</target>
+ 
+diff --git a/java4/frontend/JDime.jadd b/java4/frontend/JDime.jadd
+new file mode 100644
+index 0000000..38ff79f
+--- /dev/null
++++ b/java4/frontend/JDime.jadd
+@@ -0,0 +1,393 @@
++/*
++ * Copyright (C) 2013-2014 Olaf Lessenich
++ * Copyright (C) 2014-2015 University of Passau, Germany
++ *
++ * This library is free software; you can redistribute it and/or
++ * modify it under the terms of the GNU Lesser General Public
++ * License as published by the Free Software Foundation; either
++ * version 2.1 of the License, or (at your option) any later version.
++ *
++ * This library is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
++ * Lesser General Public License for more details.
++ *
++ * You should have received a copy of the GNU Lesser General Public
++ * License along with this library; if not, write to the Free Software
++ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
++ * MA 02110-1301  USA
++ *
++ * Contributors:
++ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
++ */
++
++aspect JDime {
++	/**
++	 * Replaces the children of the <code>ASTNode</code>.
++	 * 
++	 * @param newchildren child nodes that should replace the current ones
++	 */
++	public void ASTNode.setChildren(ASTNode[] newchildren) {
++		children = newchildren;
++		numChildren = children.length;
++	}
++
++	/**
++	 * Deletes all children of the <code>ASTNode</code>.
++	 */
++	public void ASTNode.removeChildren() {
++		children = null;
++		numChildren = 0;
++	}
++
++	public String ASTNode.jdimeId = "";
++
++	public boolean ASTNode.jdimeChanges = false;
++
++	public boolean ASTNode.isConflict = false;
++
++	public ASTNode<?> ASTNode.left;
++
++	public ASTNode<?> ASTNode.right;
++
++	/**
++	 * If the <code>ASTNode</code> represents a merge conflict, both conflicting alternatives
++	 * are appended to the <code>StringBuffer</code> in a patch-compatible format.
++	 * If the <code>ASTNode</code> does not represent a merge conflict, nothing is appended.
++	 *
++	 * @param s <code>StringBuffer</code> that is appended by potential alternatives
++	 * @return true if this node represents a conflict
++	 */
++	public boolean ASTNode.printConflict(StringBuffer s) {
++		if (isConflict) {
++			s.append("\n<<<<<<< \n");
++			if (left != null) {
++				s.append(left.prettyPrint());
++				s.append("\n");
++			}
++			s.append("======= \n");
++			if (right != null) {
++				s.append(right.prettyPrint());
++				s.append("\n");
++			}
++			s.append(">>>>>>> \n");
++			return true;
++		} 
++		return false;
++	} 
++
++	refine FlushCaches public void ASTNode.flushCaches() {
++		refined();
++		if (left != null) { left.flushCaches(); }
++		if (right != null) { right.flushCaches(); }
++	}
++
++	refine PrettyPrint public void Program.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void CompilationUnit.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void SingleTypeImportDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void TypeImportOnDemandDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint protected void TypeDecl.ppBodyDecls(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ClassDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void InterfaceDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void InstanceInitializer.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void StaticInitializer.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ConstructorDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void FieldDeclaration.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void VariableDeclaration.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void MethodDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void MemberClassDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void MemberInterfaceDecl.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void EmptyType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ArrayInit.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ParameterDeclaration.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void AssignExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Literal.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void StringLiteral.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void CharacterLiteral.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine Java7Literals public void LongLiteral.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine Java7Literals public void FloatingPointLiteral.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine Java7Literals public void DoubleLiteral.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ParExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ClassInstanceExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ArrayCreationExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Unary.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void CastExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Binary.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ConditionalExpr.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Modifiers.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Modifier.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void AbstractDot.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void VarAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void MethodAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ConstructorAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void TypeAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ArrayTypeAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ArrayTypeWithSizeAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ThisAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void SuperAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void PackageAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ArrayAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ClassAccess.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void Block.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void EmptyStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void LabeledStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ExprStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void SwitchStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ConstCase.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void DefaultCase.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void IfStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void WhileStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void DoStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ForStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void BreakStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ContinueStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ReturnStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ThrowStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void SynchronizedStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void TryStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void BasicCatch.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void AssertStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void LocalClassDeclStmt.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void BooleanType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ByteType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void ShortType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void IntType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void LongType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void CharType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void FloatType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void DoubleType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void NullType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++	refine PrettyPrint public void VoidType.prettyPrint(StringBuffer sb) {
++		if (printConflict(sb)) { return; }
++		refined(sb);
++	}
++}
+-- 
+2.3.5
+
diff --git a/java4/frontend/JDime.jadd b/java4/frontend/JDime.jadd
index 38ff79f..9008ed7 100644
--- a/java4/frontend/JDime.jadd
+++ b/java4/frontend/JDime.jadd
@@ -45,10 +45,11 @@ aspect JDime {
 	public boolean ASTNode.jdimeChanges = false;
 
 	public boolean ASTNode.isConflict = false;
+	public boolean ASTNode.isChoice = false;
 
 	public ASTNode<?> ASTNode.left;
-
 	public ASTNode<?> ASTNode.right;
+	public LinkedHashMap<String, ASTNode<?>> ASTNode.variants;
 
 	/**
 	 * If the <code>ASTNode</code> represents a merge conflict, both conflicting alternatives
@@ -58,7 +59,7 @@ aspect JDime {
 	 * @param s <code>StringBuffer</code> that is appended by potential alternatives
 	 * @return true if this node represents a conflict
 	 */
-	public boolean ASTNode.printConflict(StringBuffer s) {
+	public boolean ASTNode.printVirtualNode(StringBuffer s) {
 		if (isConflict) {
 			s.append("\n<<<<<<< \n");
 			if (left != null) {
@@ -72,7 +73,18 @@ aspect JDime {
 			}
 			s.append(">>>>>>> \n");
 			return true;
-		} 
+		} else if (isChoice) {
+			for (String condition : variants.keySet()) {
+				s.append("\n");
+				s.append("// #ifdef " + condition);
+				s.append("\n");
+				s.append(variants.get(condition).prettyPrint());
+				s.append("\n");
+				s.append("// #endif");
+			}
+            s.append("\n");
+			return true;
+		}
 		return false;
 	} 
 
@@ -83,311 +95,311 @@ aspect JDime {
 	}
 
 	refine PrettyPrint public void Program.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void CompilationUnit.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void SingleTypeImportDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void TypeImportOnDemandDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint protected void TypeDecl.ppBodyDecls(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ClassDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void InterfaceDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void InstanceInitializer.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void StaticInitializer.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ConstructorDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void FieldDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void VariableDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void MethodDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void MemberClassDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void MemberInterfaceDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void EmptyType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ArrayInit.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ParameterDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void AssignExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Literal.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void StringLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void CharacterLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine Java7Literals public void LongLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine Java7Literals public void FloatingPointLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine Java7Literals public void DoubleLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ParExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ClassInstanceExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ArrayCreationExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Unary.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void CastExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Binary.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ConditionalExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Modifiers.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Modifier.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void AbstractDot.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void VarAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void MethodAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ConstructorAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void TypeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ArrayTypeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ArrayTypeWithSizeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ThisAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void SuperAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void PackageAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ArrayAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ClassAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void Block.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void EmptyStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void LabeledStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ExprStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void SwitchStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ConstCase.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void DefaultCase.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void IfStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void WhileStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void DoStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ForStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void BreakStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ContinueStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ReturnStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ThrowStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void SynchronizedStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void TryStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void BasicCatch.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void AssertStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void LocalClassDeclStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void BooleanType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ByteType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void ShortType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void IntType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void LongType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void CharType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void FloatType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void DoubleType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void NullType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 	refine PrettyPrint public void VoidType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
+		if (printVirtualNode(sb)) { return; }
 		refined(sb);
 	}
 }
-- 
2.1.4

