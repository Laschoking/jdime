From c5457b583166fbd86905c9e4f32d7f426ad1c4be Mon Sep 17 00:00:00 2001
From: Olaf Lessenich <lessenic@fim.uni-passau.de>
Date: Mon, 15 Jun 2015 14:24:23 +0200
Subject: [PATCH 05/18] Add JDime extensions for Annotations.

Signed-off-by: Olaf Lessenich <lessenic@fim.uni-passau.de>
---
 java5/frontend/AnnotationsJDime.jadd | 64 ++++++++++++++++++++++++++++++++++++
 1 file changed, 64 insertions(+)
 create mode 100644 java5/frontend/AnnotationsJDime.jadd

diff --git a/java5/frontend/AnnotationsJDime.jadd b/java5/frontend/AnnotationsJDime.jadd
new file mode 100644
index 0000000..ac1721b
--- /dev/null
+++ b/java5/frontend/AnnotationsJDime.jadd
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2013-2014 Olaf Lessenich
+ * Copyright (C) 2014-2015 University of Passau, Germany
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301  USA
+ *
+ * Contributors:
+ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
+ */
+
+aspect AnnotationsJDime {
+	refine AnnotationPrettyPrinting public void AnnotatedCompilationUnit.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void AnnotationDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void AnnotationMethodDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void Annotation.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void ElementValuePair.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void ElementConstantValue.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void ElementAnnotationValue.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine AnnotationPrettyPrinting public void ElementArrayValue.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+}
-- 
2.1.4

