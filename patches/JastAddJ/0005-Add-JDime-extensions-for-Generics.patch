From 8df398f36004a457d66bb61038863870b0b3c553 Mon Sep 17 00:00:00 2001
From: Olaf Lessenich <lessenic@fim.uni-passau.de>
Date: Mon, 15 Jun 2015 14:25:30 +0200
Subject: [PATCH 05/12] Add JDime extensions for Generics.

Signed-off-by: Olaf Lessenich <lessenic@fim.uni-passau.de>
---
 java5/frontend/GenericMethodsJDime.jadd | 59 +++++++++++++++++++++++++++
 java5/frontend/GenericsJDime.jadd       | 70 +++++++++++++++++++++++++++++++++
 2 files changed, 129 insertions(+)
 create mode 100644 java5/frontend/GenericMethodsJDime.jadd
 create mode 100644 java5/frontend/GenericsJDime.jadd

diff --git a/java5/frontend/GenericMethodsJDime.jadd b/java5/frontend/GenericMethodsJDime.jadd
new file mode 100644
index 0000000..248f1d0
--- /dev/null
+++ b/java5/frontend/GenericMethodsJDime.jadd
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2013-2014 Olaf Lessenich
+ * Copyright (C) 2014-2015 University of Passau, Germany
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301  USA
+ *
+ * Contributors:
+ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
+ */
+
+aspect GenericMethodsJDime {
+	refine GenericMethodsPrettyPrint public void ParMethodAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint public void ParConstructorAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint public void ParSuperConstructorAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint public void ParClassInstanceExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint private void GenericMethodDecl.ppTypeParameters(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint public void GenericMethodDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericMethodsPrettyPrint public void GenericConstructorDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+}
diff --git a/java5/frontend/GenericsJDime.jadd b/java5/frontend/GenericsJDime.jadd
new file mode 100644
index 0000000..495c52b
--- /dev/null
+++ b/java5/frontend/GenericsJDime.jadd
@@ -0,0 +1,70 @@
+/*
+ * Copyright (C) 2013-2014 Olaf Lessenich
+ * Copyright (C) 2014-2015 University of Passau, Germany
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301  USA
+ *
+ * Contributors:
+ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
+ */
+
+aspect GenericsJDime {
+	refine GenericsPrettyPrint public void TypeVariable.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void ParTypeAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void ParClassDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint private void GenericClassDecl.ppTypeParameters(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void GenericClassDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void GenericInterfaceDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void Wildcard.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void WildcardExtends.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine GenericsPrettyPrint public void WildcardSuper.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+}
-- 
2.1.4

