/*
 * Copyright (C) 2013-2014 Olaf Lessenich
 * Copyright (C) 2014-2015 University of Passau, Germany
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * Contributors:
 *     Olaf Lessenich <lessenic@fim.uni-passau.de>
 *     Georg Seibt <seibt@fim.uni-passau.de>
 */
import org.ajoberstar.grgit.Grgit

plugins {
    id 'application'
    id 'eclipse'
    id 'idea'

    id "org.ajoberstar.grgit" version "4.1.0" // Used for interacting with git repositories from the buildscript.
    id "com.github.hierynomus.license" version "0.16.1"  // Used to ensure that all files contain a license header.
    id "com.scuilion.syntastic" version "0.3.9"
    id "com.github.ben-manes.versions" version "0.39.0" // Used to check for new plugin / dependency versions.
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javadoc {
    options.setEncoding 'UTF-8'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'testres'
        }
    }
}

repositories {
    mavenCentral()

    if (project.ext.JNM_MAVEN.toBoolean()) {
        maven {
            // The GitLab Maven endpoint of the JNativeMerge project
            url "https://gitlab.infosun.fim.uni-passau.de/api/v4/projects/199/packages/maven"
            content { includeModuleByRegex 'de.uni_passau.fim.seibt', '^jnativemerge.*$' }
        }
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.10.0'
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'com.thoughtworks.xstream:xstream:1.4.17'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'de.uni-passau.fim.seibt:kvconfig:1.0'

    if (project.ext.JNM_MAVEN.toBoolean()) {
        implementation 'de.uni_passau.fim.seibt:jnativemerge:0.28.1_3'
    } else {
        implementation project(':JNativeMerge')
    }

    implementation files('lib/extendj.jar')
    testImplementation 'junit:junit:4.13.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

license {
    header rootProject.file('LICENSE_HEADER')
    mapping("fxml", "XML_STYLE")
    strictCheck true

    fileTree('testres').visit {
        exclude it.getRelativePath().getPathString()
    }

    exclude "de/fosd/jdime/matcher/unordered/assignmentProblem/HungarianAlgorithm.java"
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

def loggingConfigFile = file('JDimeLogging.properties')
def configFile = file('JDime.properties')

def defaultOpts = ["-Xmx2048m", "-ea"]

startScripts {
    applicationName = rootProject.name
    mainClass = "de.fosd.jdime.Main"
    defaultJvmOpts = defaultOpts
}

distributions.with {
    main.with {
        def binDir = 'bin'

        contents {
            into binDir, {
                from project.projectDir, {
                    include configFile.name

                    def getHeadCommit = {
                        def grgit = Grgit.open(dir: project.projectDir)
                        def head = grgit.head()

                        grgit.close()
                        head.id
                    }

                    expand([
                            commit: getHeadCommit()
                    ])
                }

                from project.projectDir, {
                    include loggingConfigFile.name
                }
            }
        }
    }
}

installDist {

    if (project.hasProperty('distDir')) {
        destinationDir = file(project.property('distDir'))
    }
}

run {
    mainClass = 'de.fosd.jdime.Main'
}

test {
    systemProperty "java.util.logging.config.file", loggingConfigFile.getAbsolutePath()
    maxHeapSize = '2048m'
    enableAssertions = true
}

compileJava {
    options.compilerArgs << "-Xlint:all"
}
