From 4fc390382b97f50cfb0d377a4603c99326989cd9 Mon Sep 17 00:00:00 2001
From: Olaf Lessenich <lessenic@fim.uni-passau.de>
Date: Mon, 15 Jun 2015 14:49:55 +0200
Subject: [PATCH 12/12] Refactor JDime extensions for Java 4.

Handle pretty-printing related stuff in its own aspect.

Signed-off-by: Olaf Lessenich <lessenic@fim.uni-passau.de>
---
 java4/frontend/JDime.jadd            | 308 --------------------------
 java4/frontend/PrettyPrintJDime.jadd | 409 +++++++++++++++++++++++++++++++++++
 2 files changed, 409 insertions(+), 308 deletions(-)
 create mode 100644 java4/frontend/PrettyPrintJDime.jadd

diff --git a/java4/frontend/JDime.jadd b/java4/frontend/JDime.jadd
index 38ff79f..d9a46c4 100644
--- a/java4/frontend/JDime.jadd
+++ b/java4/frontend/JDime.jadd
@@ -82,312 +82,4 @@ aspect JDime {
 		if (right != null) { right.flushCaches(); }
 	}
 
-	refine PrettyPrint public void Program.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void CompilationUnit.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void SingleTypeImportDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void TypeImportOnDemandDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint protected void TypeDecl.ppBodyDecls(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ClassDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void InterfaceDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void InstanceInitializer.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void StaticInitializer.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ConstructorDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void FieldDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void VariableDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void MethodDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void MemberClassDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void MemberInterfaceDecl.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void EmptyType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ArrayInit.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ParameterDeclaration.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void AssignExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Literal.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void StringLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void CharacterLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine Java7Literals public void LongLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine Java7Literals public void FloatingPointLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine Java7Literals public void DoubleLiteral.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ParExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ClassInstanceExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ArrayCreationExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Unary.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void CastExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Binary.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ConditionalExpr.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Modifiers.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Modifier.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void AbstractDot.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void VarAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void MethodAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ConstructorAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void TypeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ArrayTypeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ArrayTypeWithSizeAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ThisAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void SuperAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void PackageAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ArrayAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ClassAccess.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void Block.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void EmptyStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void LabeledStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ExprStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void SwitchStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ConstCase.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void DefaultCase.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void IfStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void WhileStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void DoStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ForStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void BreakStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ContinueStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ReturnStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ThrowStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void SynchronizedStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void TryStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void BasicCatch.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void AssertStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void LocalClassDeclStmt.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void BooleanType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ByteType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void ShortType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void IntType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void LongType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void CharType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void FloatType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void DoubleType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void NullType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
-	refine PrettyPrint public void VoidType.prettyPrint(StringBuffer sb) {
-		if (printConflict(sb)) { return; }
-		refined(sb);
-	}
 }
diff --git a/java4/frontend/PrettyPrintJDime.jadd b/java4/frontend/PrettyPrintJDime.jadd
new file mode 100644
index 0000000..3bea3f2
--- /dev/null
+++ b/java4/frontend/PrettyPrintJDime.jadd
@@ -0,0 +1,409 @@
+/*
+ * Copyright (C) 2013-2014 Olaf Lessenich
+ * Copyright (C) 2014-2015 University of Passau, Germany
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301  USA
+ *
+ * Contributors:
+ *     Olaf Lessenich <lessenic@fim.uni-passau.de>
+ */
+
+aspect PrettyPrintJDime {
+	refine PrettyPrint public void Program.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void CompilationUnit.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void SingleTypeImportDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void TypeImportOnDemandDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint protected void TypeDecl.ppBodyDecls(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ClassDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void InterfaceDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void InstanceInitializer.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void StaticInitializer.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ConstructorDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void FieldDeclaration.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void VariableDeclaration.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void MethodDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void MemberClassDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void MemberInterfaceDecl.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void EmptyType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ArrayInit.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ParameterDeclaration.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void AssignExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Literal.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void StringLiteral.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void CharacterLiteral.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine Java7Literals public void LongLiteral.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine Java7Literals public void FloatingPointLiteral.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine Java7Literals public void DoubleLiteral.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ParExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ClassInstanceExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ArrayCreationExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Unary.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void CastExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Binary.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void InstanceOfExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ConditionalExpr.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Modifiers.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Modifier.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void AbstractDot.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void VarAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void MethodAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ConstructorAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void TypeAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ArrayTypeAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ArrayTypeWithSizeAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ThisAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void SuperAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void PackageAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ArrayAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ClassAccess.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void Block.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void EmptyStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void LabeledStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ExprStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void SwitchStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ConstCase.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void DefaultCase.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void IfStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void WhileStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void DoStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ForStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void BreakStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ContinueStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ReturnStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ThrowStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void SynchronizedStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void TryStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void BasicCatch.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void AssertStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void LocalClassDeclStmt.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void BooleanType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ByteType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void ShortType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void IntType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void LongType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void CharType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void FloatType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void DoubleType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void NullType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+
+	refine PrettyPrint public void VoidType.prettyPrint(StringBuffer sb) {
+		if (printConflict(sb)) { return; }
+		refined(sb);
+	}
+}
-- 
2.1.4

